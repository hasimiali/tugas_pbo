package main;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;
import java.lang.Math;

public class BallPanel extends JPanel {
	private static final int REFRESH_RATE = 120;
	ArrayList<Ball> balls = new ArrayList<>();
	private BallArea box;
	private int areaWidth;
	private int areaHeight;
	public BallPanel(final int width, final int height) {
		this.areaWidth = width; this.areaHeight = height;
		this.setPreferredSize(new Dimension(areaWidth, areaHeight));
		Random rand = new Random();
		int radius = 50;
		int x = rand.nextInt(width - radius * 2 - 20) + radius + 10;
		int y = rand.nextInt(height - radius * 2 - 20) + radius + 10;
		int speed = 5;
		int angleInDegree = rand.nextInt(360);
		balls.add(new Ball(x, y, radius, speed, angleInDegree, Color.BLUE));
		balls.add(new Ball(x+200, y+200, radius, speed, angleInDegree, Color.BLUE));
		balls.add(new Ball(x+400, y+400, radius, speed, angleInDegree, Color.BLUE));

		box = new BallArea(0, 0, width, height, Color.BLACK, Color.WHITE);
		//untuk mendapatkan ukuran area latar belakang jika frame diresize
		this.addComponentListener(new ComponentAdapter() {
			@Override
			public void componentResized(ComponentEvent e) {
				Component c = (Component)e.getSource();
				Dimension dim = c.getSize();
				areaWidth = dim.width;
				areaHeight = dim.height;
				box.set(0, 0, width, height);
			}
		});
		startThread();
	}


	public void ballCollission(ArrayList<Ball> balls) {
		for(Ball b1 : balls)
		    for(Ball b2 : balls)
		        if(Math.sqrt(Math.pow((b2.x-b1.x), 2)+Math.pow((b2.y-b1.y), 2)) <= 100){
		            //do whatever (such as bouncing off) when the balls collide
		        	System.out.println(Math.sqrt(Math.pow((b2.x-b1.x), 2)+Math.pow((b2.y-b1.y), 2)));
		            b1.speedX = -(b1.speedX);
		            b1.speedY = -(b1.speedY);
		            b2.speedX = -(b2.speedX);
		            b2.speedY = -(b2.speedY);           
		        }
	}
	public void startThread() {
		Thread gameThread = new Thread() {
			public void run() {
				while (true) {
					for(Ball i : balls) {
						i.collide(box);
						i.ballCollission(balls);
					}
					repaint();
					try {
					Thread.sleep(1000 / REFRESH_RATE);
					} catch (InterruptedException ex) {}
				}
			}
		};
		gameThread.start();
	}
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		box.draw(g);
		for(Ball i : balls) {
			i.draw(g);
		}
		
	}
}